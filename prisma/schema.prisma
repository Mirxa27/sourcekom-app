generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String?
  password             String
  avatar               String?
  bio                  String?
  role                 UserRole               @default(USER)
  isActive             Boolean                @default(true)
  emailVerified        DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  contents             Content[]
  favorites            Favorite[]
  notifications        Notification[]
  payments             Payment[]
  purchases            Purchase[]
  analytics            ResourceAnalytics[]
  resources            Resource[]
  reviews              Review[]
  subscriptions        Subscription[]
  supportReplies       SupportReply[]
  supportTickets       SupportTicket[]
  savedPaymentMethods  SavedPaymentMethod[]

  @@map("users")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  resources   Resource[]

  @@map("categories")
}

model Resource {
  id            String              @id @default(cuid())
  title         String
  description   String
  slug          String              @unique
  content       String?
  fileUrl       String?
  fileUrl2      String?
  fileUrl3      String?
  previewUrl    String?
  thumbnail     String?
  price         Float               @default(0)
  originalPrice Float?
  isFree        Boolean             @default(false)
  isPublished   Boolean             @default(false)
  isFeatured    Boolean             @default(false)
  downloadCount Int                 @default(0)
  viewCount     Int                 @default(0)
  tags          String?
  metadata      String?
  productType   ResourceType        @default(DIGITAL_PRODUCT)
  pricingTier   PricingTier         @default(BASIC)
  licenseType   LicenseType         @default(STANDARD)
  version       String?             @default("1.0.0")
  fileSize      Int?
  fileFormat    String?
  difficulty    String?
  duration      String?
  requirements  String?
  features      String?
  demoUrl       String?
  supportLevel  SupportLevel        @default(STANDARD)
  rating        Float               @default(0)
  ratingCount   Int                 @default(0)
  wishlistCount Int                 @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  authorId      String
  categoryId    String
  favorites     Favorite[]
  payments      Payment[]
  purchases     Purchase[]
  analytics     ResourceAnalytics[]
  templates     ResourceTemplate[]
  author        User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category      Category            @relation(fields: [categoryId], references: [id])
  reviews       Review[]

  @@map("resources")
}

model ResourceAnalytics {
  id         String   @id @default(cuid())
  resourceId String
  userId     String?
  eventType  String
  sessionId  String?
  ipAddress  String?
  userAgent  String?
  referrer   String?
  metadata   String?
  createdAt  DateTime @default(now())
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@map("resource_analytics")
}

model ResourceTemplate {
  id           String   @id @default(cuid())
  resourceId   String
  templateType String
  content      String
  variables    String?
  isPremium    Boolean  @default(false)
  downloads    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resource     Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@map("resource_templates")
}

model Purchase {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("SAR")
  paymentMethod   String
  paymentId       String?
  paymentStatus   PaymentStatus @default(PENDING)
  downloadUrl     String?
  downloadExpires DateTime?
  licenseKey      String?       // Generated license key
  licenseStatus   String?       @default("ACTIVE") // ACTIVE, REVOKED, EXPIRED
  activationLimit Int?          @default(1) // How many times can be activated
  activationCount Int?          @default(0) // Current activation count
  refundStatus    RefundStatus? @default(NONE)
  refundReason    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  resourceId      String
  payment         Payment?      @relation(fields: [paymentId], references: [id])
  resource        Resource      @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("purchases")
}

model Payment {
  id                String        @id @default(cuid())
  amount            Float
  currency          String        @default("SAR")
  paymentMethod     String        @default("myfatoorah")
  paymentStatus     PaymentStatus @default(PENDING)
  externalId        String?
  paymentUrl        String?
  customerReference String?
  customerInfo      String?
  metadata          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  userId            String
  resourceId        String
  resource          Resource      @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases         Purchase[]

  @@map("payments")
}

model SavedPaymentMethod {
  id              String   @id @default(cuid())
  userId          String
  cardToken       String   @unique
  cardNumber      String   // Last 4 digits
  cardBrand       String?  // Visa, Mastercard, etc.
  expiryMonth     String
  expiryYear      String
  cardHolderName  String
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_payment_methods")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("reviews")
}

model Subscription {
  id            String             @id @default(cuid())
  plan          SubscriptionPlan
  status        SubscriptionStatus @default(ACTIVE)
  startDate     DateTime           @default(now())
  endDate       DateTime?
  amount        Float
  currency      String             @default("SAR")
  paymentMethod String
  paymentId     String?
  features      String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  userId        String
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model NewsletterSubscription {
  id           String   @id @default(cuid())
  email        String   @unique
  isActive     Boolean  @default(true)
  subscribedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("newsletter_subscriptions")
}

model ContactInquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  message   String
  type      String   @default("general")
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_inquiries")
}

model Notification {
  id         String   @id @default(cuid())
  title      String
  message    String
  type       String   @default("info")
  isRead     Boolean  @default(false)
  isGlobal   Boolean  @default(false)
  actionUrl  String?
  actionText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  eventType String
  eventData String?
  userId    String?
  sessionId String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("analytics_events")
}

model SupportTicket {
  id          String         @id @default(cuid())
  ticketId    String         @unique
  userId      String
  subject     String
  category    String
  priority    String         @default("medium")
  status      String         @default("open")
  description String
  attachments String?
  assignedTo  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  replies     SupportReply[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model SupportReply {
  id         String        @id @default(cuid())
  ticketId   String
  userId     String
  message    String
  isInternal Boolean       @default(false)
  createdAt  DateTime      @default(now())
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_replies")
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  category    String   @default("general")
  description String?
  isEncrypted Boolean  @default(false)
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model PaymentSettings {
  id                    String   @id @default(cuid())
  // MyFatoorah API Configuration
  apiKey                String
  countryCode           String   @default("SAU")
  isTest                Boolean  @default(false)
  
  // Webhook Configuration
  webhookEnabled        Boolean  @default(true)
  webhookEndpoint       String?
  webhookSecretEnabled  Boolean  @default(true)
  webhookSecretKey      String?
  
  // Webhook Events (stored as JSON array)
  webhookEvents         String   @default("[]")
  
  // Retry Configuration
  signingVersion        String   @default("v2")
  numberOfRetries       Int      @default(5)
  delayBetweenRetries   Int      @default(180) // seconds
  
  // Payment Gateway Settings
  enabledGateways       String   @default("[]") // JSON array of enabled gateway IDs
  
  // Styling Configuration (JSON)
  cardPaymentStyle      String?  @db.Text
  stcPayStyle           String?  @db.Text
  
  updatedBy             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("payment_settings")
}

model Content {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  content        String
  excerpt        String?
  type           String    @default("page")
  status         String    @default("draft")
  featured       Boolean   @default(false)
  seoTitle       String?
  seoDescription String?
  authorId       String
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("contents")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  createdAt  DateTime @default(now())
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("favorites")
}

enum UserRole {
  USER
  CREATOR
  ADMIN
}

enum ResourceType {
  PHYSICAL_RESOURCE
  DIGITAL_PRODUCT
  TEMPLATE
  GUIDE
  SOFTWARE
  DOCUMENTATION
}

enum PricingTier {
  BASIC
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum LicenseType {
  STANDARD
  COMMERCIAL
  ENTERPRISE
  WHITE_LABEL
  CUSTOM
}

enum SupportLevel {
  BASIC
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum RefundStatus {
  NONE
  REQUESTED
  APPROVED
  REJECTED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}
